/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 15 02:35:33 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      int int0 = 1;
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      aVLTree_Node1.height = (-741);
      aVLTree_Node0.height = 0;
      aVLTree_Node0.height = 0;
      AVLTree.Node aVLTree_Node2 = aVLTree0.new Node(0);
      aVLTree_Node1.left = aVLTree_Node2;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.right.key = 0;
      aVLTree0.find((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.insert(2206);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node1.height = 2257;
      aVLTree_Node0.left.key = 2257;
      aVLTree_Node1.key = (-317);
      aVLTree_Node0.key = 1;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert((-2258));
      aVLTree0.delete(1);
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.delete(2206);
      aVLTree0.find(1);
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1586);
      int int0 = 178;
      aVLTree0.insert(178);
      aVLTree0.insert((-416));
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      aVLTree0.insert((-1));
      aVLTree0.find(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert(178);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert(543);
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.getRoot();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete(30);
      aVLTree0.insert((-1));
      aVLTree0.insert((-2839));
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.left;
      aVLTree_Node2.height = (-2839);
      aVLTree_Node2.left = aVLTree_Node1;
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.find(1436);
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-189);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-189));
      aVLTree0.insert(0);
      aVLTree0.insert(3388);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node1.height = (-189);
      aVLTree_Node1.key = 1;
      aVLTree_Node1.right = aVLTree_Node0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(3388);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3647));
      aVLTree0.delete((-752));
      aVLTree0.insert(3486);
      aVLTree0.delete(3486);
      aVLTree0.insert((-752));
      aVLTree0.insert(721);
      aVLTree0.delete((-2293));
      aVLTree0.delete((-4296));
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.delete(130);
      aVLTree0.insert(1261);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.delete((-5098));
      int int0 = (-1);
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.delete(1);
      aVLTree0.delete(5512);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-840));
      aVLTree0.insert((-2758));
      aVLTree0.delete((-2978));
      aVLTree0.delete((-2978));
      aVLTree0.insert((-2978));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-2978));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1;
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      int int1 = 2672;
      aVLTree0.find(2672);
      aVLTree0.insert((-542));
      int int2 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-3742));
      aVLTree0.insert((-3742));
      int int0 = (-1);
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      int int1 = 0;
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      aVLTree_Node0.height = (-1);
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1));
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node1.key = 0;
      // Undeclared exception!
      aVLTree0.find(3088);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(4884);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(1921);
      assertEquals(0, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.key = 1921;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.left.right = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node0.left = aVLTree_Node2;
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertSame(aVLTree_Node0, aVLTree_Node2);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertEquals((-1), int0);
      
      aVLTree_Node0.left.key = 1921;
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0.left);
      assertEquals(0, aVLTree0.height());
      assertSame(aVLTree_Node0, aVLTree_Node2);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 0;
      int int3 = (-1);
      // Undeclared exception!
      try { 
        aVLTree0.delete(int3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2206);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      assertEquals(1, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.height = 2257;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.left.key = 2257;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.key = 2257;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = 1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertEquals((-2258), int0);
      
      aVLTree0.insert((-2258));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(2206);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(2257);
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node2);
      
      int int1 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(1, aVLTree0.height());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(1, aVLTree0.height());
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.delete(1826);
      aVLTree0.insert(1826);
      aVLTree0.insert(1);
      aVLTree0.insert(635);
      aVLTree0.delete(1);
      aVLTree0.height();
      aVLTree0.find(1);
      aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(1, aVLTree0.height());
  }
}
